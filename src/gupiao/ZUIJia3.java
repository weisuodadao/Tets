package src.gupiao;

/**
 * @ClassName ZUIJia3
 * @Description: TODO
 * @Author xianzhuo
 * @Date 2021/8/2 4:01 下午
 * @Version V1.0
 *
 * 给定一个数组，它的第 i 个元素是一支给定的股票在第 i 天的价格。
 *
 * 设计一个算法来计算你所能获取的最大利润。你最多可以完成两笔交易。
 *
 * 输入：prices = [3,3,5,0,0,3,1,4]
 * 输出：6
 * 解释：在第 4 天（股票价格 = 0）的时候买入，在第 6 天（股票价格 = 3）的时候卖出，这笔交易所能获得利润 = 3-0 = 3 。
 * 随后，在第 7 天（股票价格 = 1）的时候买入，在第 8 天 （股票价格 = 4）的时候卖出，这笔交易所能获得利润 = 4-1 = 3
 *
 *
 **/
public class ZUIJia3 {

    public int maxProfit(int[] prices) {
        if (prices.length < 1) {
            return 0;
        }
        //最多可以完成两笔交易
        //第0天买入这天的股票的利润
        int buy1 = -prices[0];
        //第0天买入这天的股票后又卖出的利润
        int sell1 = 0;
        //第0天买入这天的股票又卖出，然后再买入的利润
        int buy2 = -prices[0];
        //第0天买入这天的股票又卖出，然后再买入又卖出的利润
        int sell2 = 0;
        for (int i = 1; i < prices.length; i++) {
            //第i天结束时的状态下，利润要么是第i-1天时的利润（第i-1天买入了，第i天啥也不干），要么是
            //第i天买入股票后的利润（第i-1天没有买入，第i天才买入）

            buy1 = Math.max(buy1, -prices[i]);
            //第i天结束时的状态下（此前肯定已经买入过一次了），利润要么是第i-1天时的利润
            //（第i-1天买入又卖出了，第i天啥也不干），要么是
            //第i天卖出股票后的利润（前面已经买入过一次，第i天卖出）

            sell1 = Math.max(sell1, buy1 + prices[i]);

            //第i天结束时的状态下，利润要么是第i-1天时的利润（此前已经买入卖出过一次，第i天啥也不干），
            //要么是第i天买入股票后的利润（此前买入卖出过一次，第i天再次买入）
            buy2 = Math.max(buy2, sell1 - prices[i]);

            //第i天结束时的状态下（此前肯定已经买入卖出过一次了），利润要么是第i-1天时的利润
            //（第i-1天第二次买入，第i天啥也不干），要么是
            //第i天卖出股票后的利润（前面已经买入过一次，第i天卖出）
            sell2 = Math.max(sell2, buy2 + prices[i]);
        }
        //最大利润，根据表达式，最大利润要么是sell1要么是sell2，而sell1必然是小于等于sell2的
        return sell2;

    }

}
